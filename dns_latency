#!/usr/bin/env python
from __future__ import print_function
from bcc import BPF
from socket import inet_ntop, ntohs, AF_INET, AF_INET6
import socket
from struct import pack
import ctypes as ct
import re

bpf_text = """

#include <uapi/linux/ptrace.h>
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wtautological-compare"
#pragma clang diagnostic ignored "-Wenum-conversion"
#include <net/sock.h>
#pragma clang diagnostic pop
#include <net/inet_sock.h>
#include <bcc/proto.h>


struct data_connect_t {
        u32 pid;
        char comm[TASK_COMM_LEN];
        u64 ts;
};


BPF_HASH(connect_latency_map, struct sock *, struct data_connect_t);

struct info_v4_t{
    u64 pid;
    u64 saddr;
    u64 daddr;
    u64 dport;
    u64 sport; 
    char comm[TASK_COMM_LEN];
    u64 delta_us;
};

BPF_PERF_OUTPUT(info_eventsv4);

int trace_query_return(struct pt_regs *ctx, struct sock *sk, struct msghdr *msg, 
                             int len, int noblock, int flags, int *addr_len){
    struct data_connect_t *data;
    u16 ffamily = 0, sport = 0, dport;
    ffamily = sk->__sk_common.skc_family;
    sport = sk->__sk_common.skc_num;
    dport = sk->__sk_common.skc_dport;
    data = connect_latency_map.lookup(&sk);
    if (data == 0)
        return 0;
    if (ffamily == AF_INET ){
            struct info_v4_t info = {.pid = data->pid};
            bpf_probe_read(&info.comm,sizeof(info.comm),&data->comm);
            info.saddr = sk-> __sk_common.skc_rcv_saddr;
            info.daddr = sk-> __sk_common.skc_daddr;
            info.sport = ntohs(sport);
            info.dport = ntohs(dport);
            u64 now = bpf_ktime_get_ns();
            u64 delta = ( now - data->ts) / 1000;
            info.delta_us = delta;
            info_eventsv4.perf_submit(ctx, &info, sizeof(info));
            }
    connect_latency_map.delete(&sk);
    return 0;
}

int trace_query(struct pt_regs *ctx, struct sock *sk, struct msghdr *msg, size_t len){
    u16 dport = sk->__sk_common.skc_dport;
    u64 ddport = ntohs(dport);
    if ( ddport != 53 )
        return 0;
    u32 pid = bpf_get_current_pid_tgid();
    struct data_connect_t data = {.pid = pid};
    bpf_get_current_comm(&data.comm, sizeof(data.comm));
    data.ts = bpf_ktime_get_ns();
    connect_latency_map.update(&sk,&data);
    return 0;
}
"""


def print_ipv4_event(cpu, data, size):
    event = b["info_eventsv4"].event(data)
    daddr = inet_ntop(AF_INET, pack("I", event.daddr)).encode()
    saddr = inet_ntop(AF_INET, pack("I", event.saddr)).encode() 
    multicast = re.search("^224.*.*.*$",saddr)
    if (event.dport != 53) :
        return
    else:
        print("%-5d %-15s %-16s %-5d %-16s %-5d %-12f" % (event.pid,
        event.comm.decode(),inet_ntop(AF_INET, pack("I", event.daddr)).encode(),
            event.dport,
            inet_ntop(AF_INET, pack("I", event.saddr)).encode(),
            event.sport, float(event.delta_us)/1000))

b = BPF(text=bpf_text)

b.attach_kprobe(event="udp_recvmsg", fn_name="trace_query_return")
b.attach_kprobe(event="udp_sendmsg", fn_name="trace_query")


# header
print('{:<5s} {:<15s} {:<16s} {:<5s} {:<16s} {:<5s} {:<12s}'.format("PID", "COMM", "DADDR",
     "DPORT","SADDR" , "SPORT", "LAT(ms)"))


b["info_eventsv4"].open_perf_buffer(print_ipv4_event)
while 1:
    b.kprobe_poll()

